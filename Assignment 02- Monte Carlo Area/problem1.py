# -*- coding: utf-8 -*-
"""problem1 simulation offline 2

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1PU90MXoRQIPmIMT9qLtaqUqCDgVqCVUA
"""

#import the libraries
import matplotlib.pyplot as plt
import random
import math
import numpy as np

# store values for barplot
est_pi =[]
sim_area =[]

def area_plot(N):
  random.seed(10)
  #printing the square
  square_x = [0,5,5,0,0]
  square_y = [0,0,5,5,0]
  plt.plot(square_x,square_y,c="blue")
  #the one fourth of this circle
  circle_x = []
  circle_y = []
  #count=0 

  for x in np.arange(0,3.0001,0.0001):
    x = round(x,4)
    circle_x.append(x)
    #print(x)
    y = math.sqrt(9-(x)**2)
    circle_y.append(y)
  plt.plot(circle_x,circle_y,c="blue")
  #sample number 

  hit=0
  hit_x =[]
  hit_y =[]
  miss_x =[]
  miss_y =[]
  
  for i in range(1,N+1):

    # for one fourth of the circle
    x = random.uniform(0,5)
    y = random.uniform(0,5)
    #if x less than the radius value
    if x<=3: 
      if y<= math.sqrt(9-(x)**2) :
        hit+=1
        hit_x.append(x)
        hit_y.append(y)
      else:
        miss_x.append(x)
        miss_y.append(y)
    else:
      miss_x.append(x)
      miss_y.append(y)
  #plotting the random values
  plt.scatter(miss_x,miss_y,c='blue',s=5)
  plt.scatter(hit_x,hit_y,c='red',s=5)
  print("For sample number: ",N)
  estimated_pi = (hit/N) * (100/9)
  est_pi.append(estimated_pi)
  print("Estimated value of PI: ",estimated_pi)
  #true value , r=3 , area of circle = pi *r ^2 
  true_value =  math.pi* (3**2)
  print("True circle area: ",true_value)
  # pi = (area of circle * area of rectange) * (100/9)
  #so, area of circle = pi * area of rectange * (9/100)
  simulated_area = estimated_pi * (10**2) * (9/100)
  sim_area.append(simulated_area)
  print("Estimated value of the area of the circle: ", simulated_area) 
  plt.show()

N = [100,1000,10000]
for i in N: 
  area_plot(i)
#print(est_pi,sim_area)
# ploting the barplot for pi values
x = np.array(["100","1000","10000"])
y = np.array(est_pi)
plt.bar(x,y,color=["red","green","blue"])
plt.xlabel("N (number of trials)")
plt.ylabel("Estimated Pi Value")
plt.show()

# area of circle barplot
x = np.array(["100","1000","10000"])
y = np.array(sim_area)
plt.bar(x,y,color=["red","green","blue"])
plt.xlabel("N (number of trials)")
plt.ylabel(" Area of the circle")
plt.show()