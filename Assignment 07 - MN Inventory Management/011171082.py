# -*- coding: utf-8 -*-
"""Inventory Assignmetn

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1aG2AQg3qn0gHFqJ4HU_8skiGMfOeUD0y
"""

import numpy as np
np.random.seed(10)

"""m = 11
n = 5"""
#Take m,n as input
m = int(input("Enter M: "))
n= int(input("Enter N: "))

beginning_inventory = 3
demand = 0
ending_inventory = 0
shortage_quantity = 0
order_quantity = 8
days_until_next_arrival = 2
shortage_count = 0 # to count the shortage days
total_ending_inventory = [] # to store all ending inventory values
days = [] # to store the days
total_days = 0 

for cycle in range(1, 11):
    print("Cycle No: ", cycle)
    for day in range(1, n+1):
        print("Day: ", day)

        total_days += 1
        days.append(total_days)

        # Calculate beginning inventory (beginning inventory + quantity arrived)
        # Write code here
        if days_until_next_arrival == 0 : 
          beginning_inventory = ending_inventory + order_quantity
        # Check whether we ordered more than our capacity
        if   beginning_inventory > m:
          beginning_inventory = m # cap it to 11 and others doesn't add (wasted)

        # Today's demand
        daily_demand = np.random.choice([0,1,2,3,4], p=[0.10,0.25,0.35,0.21,0.09])
        total_demand = daily_demand + shortage_quantity

        if total_demand <= beginning_inventory:
            ending_inventory = beginning_inventory - total_demand
            shortage_quantity = 0
        else:
            extra_demand = total_demand - beginning_inventory
            shortage_quantity = extra_demand
            ending_inventory = 0
            # Count shortage days
            shortage_count += 1
        
        # add the valuse of each day
        total_ending_inventory.append(ending_inventory)

        # print Beginning inventory, Daily demand, Ending inventory, Shortage quantity
        print("Begining Inventory: {}, Daily Demand: {}, Ending Inventory: {}, Shortage Quantity: {}".format(beginning_inventory,
                                                                                                                  daily_demand,ending_inventory,
                                                                                                                  shortage_quantity))
        
        if (day==n):
          # Review day
          # Place order
          # Find order quantity
          order_quantity = ( m-ending_inventory )
          # Generate random Lead time
          #1 0.6
          #2 0.3
          #3 0.1
          lead_time = np.random.choice([1,2,3], p=[0.6, 0.3, 0.1])
          # days_until_next_arrival, order_quantity set
          days_until_next_arrival = lead_time
          print("lead time form here",days_until_next_arrival)
          order_quantity += shortage_quantity
      
        
        beginning_inventory = ending_inventory
        if day == n:  # to prevent the decrement when the review time to set the days_until_next_arrival
          pass
        else :
          days_until_next_arrival -= 1

        print("Order Quantity: {}, Days Until Next Arrival: {}".format(order_quantity,days_until_next_arrival))
    print("-----------------------------------------------------------------------------")
# Avg ending inventory
print("Average Ending Inventory: ", sum(total_ending_inventory)/ (n*10))

# Shortage day
print("Number Shortage occured (Day): ", shortage_count)
# Ending inventory plot

import matplotlib.pyplot as plt
plt.title("Inventory_level vs Day graph")
plt.plot(days,total_ending_inventory,marker = "o")
plt.xlabel("day number")
plt.ylabel("Ending_inventory of each day")
plt.show()
#print(days)
#print(total_ending_inventory)